// Source Code(Using Case Statement)

module alu_32bit_case (
    output reg [31:0] y,
    input [31:0] a,
    input [31:0] b,
    input [2:0] f
);
always @ (*) begin
    case (f)
        3'b000: y = a & b;       // AND
        3'b001: y = a | b;       // OR
        3'b010: y = ~(a & b);    // NAND
        3'b011: y = ~(a | b);    // NOR
        3'b100: y = a + b;       // ADD
        3'b101: y = a - b;       // SUB
        3'b110: y = a * b;       // MUL
        default: y = 32'bx;      // Undefined operation
    endcase
end
endmodule

---------------------------
[
//Source code (Using If statement)

module alu_32bit_if (
    output reg [31:0] y,
    input [31:0] a,
    input [31:0] b,
    input [2:0] f
);
always @ (*) begin
    if (f == 3'b000)
        y = a & b;       // AND
    else if (f == 3'b001)
        y = a | b;       // OR
    else if (f == 3'b010)
        y = a + b;       // ADD
    else if (f == 3'b011)
        y = a - b;       // SUB
    else if (f == 3'b100)
        y = a * b;       // MUL
    else
        y = 32'bx;       // Undefined operation
end 
endmodule
 
]
------------------------------
//Test bench for both if and Case statement

module alu_32bit_tb_if;
reg [31:0] a;
reg [31:0] b;
reg [2:0] f;
wire [31:0] y;

alu_32bit_if test (.y(y), .a(a), .b(b), .f(f));

initial
begin
    a = 32'h00000000;
    b = 32'hFFFFFFFF;

    #10 f = 3'b000;  // AND
    #10 f = 3'b001;  // OR
    #10 f = 3'b010;  // ADD
    #10 f = 3'b100;  // MUL
end

initial
    #50 $finish;

endmodule

