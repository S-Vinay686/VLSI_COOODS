// Source Code(Using Case Statement)

module alu_32bit_case (y, a, b, f);
input [31:0]a;
input [31:0] b;
input (2:0]f;
output reg [31:0] y;
always @ (*)
begin
case (f)
3'b000: y = a&b ;
3'b001: y = a|b ;
3'b010: y = ~(a&b) ;
3'b011: y = ~(a|b) ;
3'b010: y = a+b ;
3'b011: y = a-b ;
3'b100: y = a*b ;
default : y = 32'bx;
end case
end
endmodule.
---------------------------
[
//Source code (Using If statement)

module alu_32bit_if (y, a, b, f);
input [31:0]a;
input [31:0] b;
input (2:0]f;
output reg [31:0] y;
always @ (*)
begin
if (f == 3'b000)
y = a&b;
else if (f == 3'b001)
y = a|b;
else if (f == 3'b010)
y = a+b;
else if (f == 3'b011)
y = a-b;
else if (f == 3'b100)
y = a*b;
else
y = 32'bx;
end 
endmodule 
]
------------------------------
//Test bench for both if and Case statement

module alu_32bit_tb_if;
reg [31:0]a;
reg [31:0]b;
reg [2:0] f;
Wire [31:0] y;
alu_32 bit_if[case] test (.y(y), .a(a), .b(b), .f(f));
initial
begin
a = 32'h 00000000;
b = 32'h FFFFFFFF ;
#10 f = 3'b000;
#10 f = 3'b001;
#10 f = 3'b010;
#10 f = 3'b100;
end
initial
#50 $ finish;
end module.
